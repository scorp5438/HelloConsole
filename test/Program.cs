// // Исчезновение линий

// // char[,] map = 
// // {
// //     { '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',}, // индекс 0
// //     { '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#',},
// //     { '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#',},
// //     { '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#',},
// //     { '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#',},
// //     { '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',},
// //     { '#', '#', '#', ' ', ' ', ' ', '#', '#', ' ', '#', '#', ' ', ' ', '#',},
// //     { '#', '#', '#', ' ', ' ', ' ', ' ', '#', '#', ' ', ' ', ' ', ' ', '#',},
// //     { '#', '#', '#', '#', '#', ' ', '#', '#', '#', '#', '#', '#', '#', '#',},
// //     { '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',},
// //     { '#', ' ', ' ', '#', '#', ' ', ' ', ' ', ' ', '#', '#', ' ', ' ', '#',},
// //     { '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',},
// //     { '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',},
// //     { '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',},  // индекс 13
// // };

// // void drowMap(char[,] arr)
// // {
// //     for (int i = 0; i < map.GetLength(0); i++)
// //     {
// //         for (int j = 0; j < map.GetLength(1); j++)
// //         {
// //             Console.Write(arr[i, j]);
// //         }
// //         Console.WriteLine();
// //     }
// // }
// // drowMap(map);

// // int row = 10;
// // while(row > 0)
// // {
// //     check(map);
// //     row--;
// // }

// // check(map);
// // void check (char[,] arr)
// // {
// //     int row = 0;
// //     int count = 0;
// //     for (int i = 1; i < arr.GetLength(0) - 1; i++)
// //     {
// //         for (int j = 1; j < arr.GetLength(1) - 1; j++)
// //         {
// //             if (arr[i, j] == '#')
// //             {
// //                 count++;
// //                 if (count == 12)
// //                 {
// //                     row = i;
// //                 }
// //             }
// //         }
// //         count = 0;
// //     }
// //     chenge(map, row);
// // }

// // void chenge(char[,] arr, int x)
// // {
// //     for (int i = x; i > 1; i--)
// //     {
// //         for (int j = 1; j < arr.GetLength(1) - 1; j++)
// //         {
// //             arr[i, j] = arr[i - 1, j];
// //         }
// //     }
// // }

// // Console.WriteLine();
// // drowMap(map);

// // ****************************************************************************************************************************************
// // ****************************************************************************************************************************************

Console.CursorVisible = false;

char[,] map =
{
    {'#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#'},
    {'#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#'},
    {'#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#'},
    {'#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#'},
    {'#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#'},
    {'#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#'},
    {'#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#'},
    {'#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#'},
    {'#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#'},
    {'#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#'},
    {'#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#'},
    {'#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#'},
    {'#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#'},
    {'#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#'},
    {'#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#'},
    {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'}
};

char[,] oShape =
{
    {'#', '#'},
    {'#', '#'},
};

bool isOpen = true;

int elemX = 1, elemY = 10;

Task task = Task.Run(() =>
    {
        while (isOpen)
        {
            while (map[0, 10] != '#')
            {
                while (map[elemX + 1, elemY] != '#' && map[elemX + 1, elemY + 1] != '#')
                {
                    Console.Clear();
                    drowMap(map);
                    Console.SetCursorPosition(elemY, elemX);
                    drowElem(oShape, elemX, elemY);
                    elemX++;
                    Thread.Sleep(100);
                }
                map[elemX - 1, elemY] = '#';
                map[elemX - 1, elemY + 1] = '#';
                map[elemX, elemY] = '#';
                map[elemX, elemY + 1] = '#';
                elemX = 1;
                elemY = 10;
            }
        }
    });

while (isOpen)
{
    ConsoleKeyInfo charKey = Console.ReadKey();
    switch (charKey.Key)
    {
        case ConsoleKey.LeftArrow:
            if (map[elemX, elemY - 1] != '#')
            {
                elemY--;
            }
            break;
        case ConsoleKey.RightArrow:
            if (map[elemX, elemY + 2] != '#')
            {
                elemY++;
            }
            break;
        case ConsoleKey.Escape:
            isOpen = false;
            break;
    }
}
// ********************************************************

void drowMap(char[,] arr)
{
    Console.SetCursorPosition(0, 0);
    for (int i = 0; i < arr.GetLength(0); i++)
    {
        for (int j = 0; j < arr.GetLength(1); j++)
        {
            Console.Write(arr[i, j]);
        }
        Console.WriteLine();
    }
}

void drowElem(char[,] arr, int x, int y)
{
    Console.SetCursorPosition(y, x);
    for (int i = 0; i < arr.GetLength(0); i++)
    {
        for (int j = 0; j < arr.GetLength(1); j++)
        {
            Console.Write(arr[i, j]);
        }
        Console.SetCursorPosition(y, x + 1);
    }
}